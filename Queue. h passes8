//
// Created by lanat on 05/06/2023.
//

#ifndef MTMCHKIN_QUEUE_H
#define MTMCHKIN_QUEUE_H

#include <iostream>
#include <exception>


typedef void(*StaticFunctionPtr)();

template<typename T>
class Queue {

private:
    struct Node {
        T data;
        Node *next;

        Node(const T &value) : data(value), next(nullptr) {}

        Node& operator=(const Node& otherNode) {
            if (this != &otherNode) {
                this->data = otherNode.data;
                this->next = otherNode.next;
            }
            return *this;
        }

    };
    int m_size;
    Node *m_first;
    Node *m_rear;

public:
    Queue(int m_size = 0, Node *m_first = nullptr, Node *m_rear = nullptr) {
        this->m_first = m_first;
        this->m_size = m_size;
        this->m_rear = m_first;
    }
    Queue(const Queue<T> &otherQueue);
    class EmptyQueue {
    };
    T &front();
    void pushBack(const T &object) ;
    void popFront();
    bool isEmpty() const;
    int size() const;
    ~Queue();
    Queue<T>& operator=(Queue& otherQueue);
    class InvalidOperation {
    };
    class Iterator;
    Iterator begin(){
        return Iterator(this,m_first);
    }
    Iterator end() {
        return Iterator(this,nullptr);
        // return Iterator(this,m_rear->next);

    }
    class ConstIterator;

    ConstIterator begin() const{
        return ConstIterator(this,m_first);
    }
    ConstIterator end() const{
        return ConstIterator(this,m_rear->next);
    }
};
template<typename T>
void Queue<T>::popFront() {
    if (m_size == 0) {
        throw EmptyQueue(); // or handle the empty queue case in another way
    }
    Node *temp = m_first; // Store a pointer to the first node
    m_first = m_first->next; // Update the first pointer to the next node
    delete temp; // Deallocate memory for the first node
    m_size--; // Decrease the size of the queue
}
template<typename T>
void Queue<T>::pushBack(const T &object) {
    //Node* newNode = nullptr;
    //try{
    T toAdd = object;
    Node *newNode = new Node(toAdd);
    //}catch(std::bad_alloc()){
    //    delete newNode;
   //     throw;//???
   // }
    if (m_size == 0) {
        m_first = newNode;
        m_rear = newNode;
    } else {
        m_rear->next = newNode;
        m_rear = newNode;
    }
    m_size++;
}
template<typename T>
T& Queue<T>::front() {
if (m_size <= 0) {
throw EmptyQueue();
}
return m_first->data;
}

template<typename T>
bool Queue<T>::isEmpty() const {//i think we should remove this function
return (m_size == 0);
}


template<typename T>
Queue<T>::~Queue()
{
    Node* temp = m_first;
    while (temp != nullptr) {
        Node* nextNode = temp;
        temp=temp->next;
        delete nextNode;
    }
}


template<typename T>
Queue<T>::Queue(const Queue<T> &otherQueue) {
    if(otherQueue.isEmpty()){//is it good
        throw EmptyQueue();
    }
    //m_size=otherQueue.m_size;
    m_size = 0;
    m_first = nullptr;
    m_rear = nullptr;
    Node* currNode = otherQueue.m_first;
    try {
        while (currNode != nullptr) {
            pushBack(currNode->data);
            currNode = currNode->next;
        }
        // m_size=otherQueue.m_size;
    } catch (std::bad_alloc&) {
        Node* temp = m_first;
        while (temp != nullptr) {
            Node* nextNode = temp;
            temp=temp->next;
            delete nextNode;
        }
        m_first = nullptr;
        m_rear = nullptr;
        m_size = 0;
        throw;
    }

}

template<typename T>
Queue<T>& Queue<T>::operator=(Queue& otherQueue){
    if(this==&otherQueue){
        return *this;
    }
    try{
        Queue<T> newQueue = new Queue<T>(otherQueue);
        Node* current = m_first;
        for(int i = 0; i< this->m_size; i++)
        {
            Node* temp = current;
            current = current->next;
            delete temp->data; 
            delete temp;
        }
        this->m_first = newQueue->m_first;
        this->m_rear = newQueue->m_rear;
        this->m_size = newQueue->m_size;
        return *this;
    }catch(std::bad_alloc())
    {
       return *this;
    }
}
template<typename T>
int Queue<T>::size() const{
return m_size;
}


template<typename T>
class Queue<T>::Iterator {

public:
    T &operator*();
    Iterator &operator++();
    Iterator &operator++(int);
    bool operator==(const Iterator& it) const;
    bool operator!=(const Iterator& it) const;
    Iterator(const Iterator&)=default;
    Iterator& operator=(const Iterator&)=default;
    class InvalidOperation{};

private:

    Queue<T> *queue;
    Node* current;
    Iterator( Queue<T> *queue, Node* current):queue(queue) , current(current){}
    Iterator();//not sure if i should add this
    friend class Queue<T>;

};

template<typename T>
Queue<T>::Iterator::Iterator() : queue(nullptr) {}

template<typename T>
     T& Queue<T>::Iterator::operator*() {
        if (current== nullptr) {
            throw InvalidOperation();
        }
        return this->current->data;
    }
template<typename T>
typename Queue<T>::Iterator& Queue<T>::Iterator::operator++() {//ahould we add invalidoperation to other
        if (current == nullptr) {
            throw InvalidOperation();
        }
        current = current->next;
        return *this;
    }
template<typename T>
typename Queue<T>::Iterator& Queue<T>::Iterator::operator++(int) {//ahould we add invalidoperation to other
    Iterator result =*this;
    ++*this;
    return result;
}
template<typename T>
    bool Queue<T>::Iterator::operator==(const Iterator &other) const {
        if(this->queue==other.queue) {
            return current == other.current;
        }
        return false;
    }

template<typename T>
bool Queue<T>::Iterator::operator!=(const Iterator &other) const {
    return !(*this == other);
}


template<typename T>
class Queue<T>::ConstIterator {

    public:
        const T &operator*() const;
        ConstIterator &operator++();
        ConstIterator &operator++(int);
        bool operator==(const ConstIterator& it) const;
        bool operator!=(const ConstIterator& it) const;
        ConstIterator(const ConstIterator&)=default;
        ConstIterator& operator=(const ConstIterator&)=default;
        class InvalidOperation{};
    private:
        const Queue<T> *queue;
        const Node* current;
        ConstIterator(const Queue<T> *queue,const Node* current):queue(queue),current(current) {};
        ConstIterator();//not sure if i should add this
        friend class Queue<T>;

};

template<typename T>
const T& Queue<T>::ConstIterator::operator*()const {
    if (current== nullptr) {
        throw InvalidOperation();
    }
    return this->current->data;
}
template<typename T>
typename Queue<T>::ConstIterator& Queue<T>::ConstIterator::operator++() {//ahould we add invalidoperation to other
    if (current == nullptr) {
        throw InvalidOperation();
    }
    current = current->next;
    return *this;
}
template<typename T>
typename Queue<T>::ConstIterator& Queue<T>::ConstIterator::operator++(int) {//ahould we add invalidoperation to other
    Iterator result =*this;
    ++*this;
    return result;
}
template<typename T>
bool Queue<T>::ConstIterator::operator==(const ConstIterator &other) const {
    if(this->queue==other.queue) {
        return current == other.current;
    }
    return false;
}

template<typename T>
bool Queue<T>::ConstIterator::operator!=(const ConstIterator &other) const {
    return !(*this == other);
}


template<typename T, typename Function>
Queue<T> filter(const Queue<T> &queue, Function functionPtr) {//should it get a const queue?
    Queue<T> resultQueue;
    for (const T &element: queue) {
        if (functionPtr(element)) {
            resultQueue.pushBack(element);
        }
    }
    return resultQueue;
}

template<typename T, typename Function>
void transform(Queue<T> &queue, Function functionPtr) {
    for (T &element: queue) {
        functionPtr(element);
    }
}

template<typename T, typename Function>
std::ostream &operator<<(std::ostream &os, const Queue<T> &queue) {
    os << queue.front();
    return os;
}

#endif //MTMCHKIN_QUEUE_H
